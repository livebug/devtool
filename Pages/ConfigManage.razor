@page "/configmanager"
@inject IConfiguration _conf
@using System.ComponentModel.DataAnnotations;
@using System.Text.Json;
@using System.ComponentModel

<h3>ConfigManage</h3>
<Card Bordered="false" Title="点击按钮增加配置" Style="max-width: 600px">

    <Body>
        <Form Model="@model" OnFinish="OnFinish" OnFinishFailed="OnFinishFailed" LabelColSpan="8" WrapperColSpan="16">
            <FormItem Label="Key">
                <Input @bind-Value="@context.Key" />
            </FormItem>
            <FormItem Label="Value">
                <Input @bind-Value="@context.Value" />
            </FormItem>
            <FormItem WrapperColOffset="8" WrapperColSpan="16">
                <Button Type="@ButtonType.Primary" HtmlType="submit">
                    Submit
                </Button>
            </FormItem>
        </Form>
    </Body>
</Card>
<br>
<Card Bordered="false" Title="查看所有配置" Style="max-width: 100%">

    <Body>
        @using AntDesign.TableModels

        <Table TItem="KeyValuePair<string, string>" DataSource="@GetAllConfiguration(_conf)"  >
            <PropertyColumn Property="c=>c.Key"></PropertyColumn>
            <PropertyColumn Property="c=>c.Value"></PropertyColumn> 
        <ActionColumn Title="Action">
            <Space Size=@("middle")> 
            <SpaceItem>
                <a>Delete</a>
            </SpaceItem>
            </Space>
        </ActionColumn>
        </Table>

    </Body>
</Card>
@code {
    protected class Model
    {
        [Required]
        public string Key { get; set; }
        [Required]
        public string Value { get; set; }

        public EntityConfiguration.EntityConfigurationValue ToECV() => new EntityConfigurationValue(this.Key, this.Value);
    }

    protected Model model = new Model();
    private void OnFinish(EditContext editContext)
    {
        Console.WriteLine($"Success:{JsonSerializer.Serialize(model)}");
        _conf[model.Key] = model.Value;
    }

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(model)}");
    }


    static IDictionary<string, string> GetAllConfiguration(IConfiguration configuration)
    {
        var data = new Dictionary<string, string>();
        foreach (var child in configuration.GetChildren())
        {
            GetAllConfigurationRecursively(child, data);
        }
        return data;
    }

    static void GetAllConfigurationRecursively(IConfigurationSection section, IDictionary<string, string> data)
    {
        if (!section.GetChildren().Any())
        {
            data[section.Path] = section.Value;
            return;
        }

        foreach (var child in section.GetChildren())
        {
            GetAllConfigurationRecursively(child, data);
        }
    }
}
